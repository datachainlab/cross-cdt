// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cross/cdt/int_types.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddInt64OP struct {
	K []byte `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	V int64  `protobuf:"varint,2,opt,name=v,proto3" json:"v,omitempty"`
}

func (m *AddInt64OP) Reset()         { *m = AddInt64OP{} }
func (m *AddInt64OP) String() string { return proto.CompactTextString(m) }
func (*AddInt64OP) ProtoMessage()    {}
func (*AddInt64OP) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe8f54f85b37625, []int{0}
}
func (m *AddInt64OP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddInt64OP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddInt64OP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddInt64OP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddInt64OP.Merge(m, src)
}
func (m *AddInt64OP) XXX_Size() int {
	return m.Size()
}
func (m *AddInt64OP) XXX_DiscardUnknown() {
	xxx_messageInfo_AddInt64OP.DiscardUnknown(m)
}

var xxx_messageInfo_AddInt64OP proto.InternalMessageInfo

type SubInt64OP struct {
	K []byte `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	V int64  `protobuf:"varint,2,opt,name=v,proto3" json:"v,omitempty"`
}

func (m *SubInt64OP) Reset()         { *m = SubInt64OP{} }
func (m *SubInt64OP) String() string { return proto.CompactTextString(m) }
func (*SubInt64OP) ProtoMessage()    {}
func (*SubInt64OP) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe8f54f85b37625, []int{1}
}
func (m *SubInt64OP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubInt64OP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubInt64OP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubInt64OP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubInt64OP.Merge(m, src)
}
func (m *SubInt64OP) XXX_Size() int {
	return m.Size()
}
func (m *SubInt64OP) XXX_DiscardUnknown() {
	xxx_messageInfo_SubInt64OP.DiscardUnknown(m)
}

var xxx_messageInfo_SubInt64OP proto.InternalMessageInfo

type Int64CDTState struct {
	Max int64 `protobuf:"varint,1,opt,name=max,proto3" json:"max,omitempty"`
	Min int64 `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
}

func (m *Int64CDTState) Reset()         { *m = Int64CDTState{} }
func (m *Int64CDTState) String() string { return proto.CompactTextString(m) }
func (*Int64CDTState) ProtoMessage()    {}
func (*Int64CDTState) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfe8f54f85b37625, []int{2}
}
func (m *Int64CDTState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Int64CDTState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Int64CDTState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Int64CDTState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int64CDTState.Merge(m, src)
}
func (m *Int64CDTState) XXX_Size() int {
	return m.Size()
}
func (m *Int64CDTState) XXX_DiscardUnknown() {
	xxx_messageInfo_Int64CDTState.DiscardUnknown(m)
}

var xxx_messageInfo_Int64CDTState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddInt64OP)(nil), "cross.cdt.AddInt64OP")
	proto.RegisterType((*SubInt64OP)(nil), "cross.cdt.SubInt64OP")
	proto.RegisterType((*Int64CDTState)(nil), "cross.cdt.Int64CDTState")
}

func init() { proto.RegisterFile("cross/cdt/int_types.proto", fileDescriptor_bfe8f54f85b37625) }

var fileDescriptor_bfe8f54f85b37625 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0x2e, 0xca, 0x2f,
	0x2e, 0xd6, 0x4f, 0x4e, 0x29, 0xd1, 0xcf, 0xcc, 0x2b, 0x89, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0x4b, 0xe9, 0x25, 0xa7, 0x94, 0x48, 0x89, 0xa4,
	0xe7, 0xa7, 0xe7, 0x83, 0x45, 0xf5, 0x41, 0x2c, 0x88, 0x02, 0x25, 0x0d, 0x2e, 0x2e, 0xc7, 0x94,
	0x14, 0xcf, 0xbc, 0x12, 0x33, 0x13, 0xff, 0x00, 0x21, 0x1e, 0x2e, 0xc6, 0x6c, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0x9e, 0x20, 0xc6, 0x6c, 0x10, 0xaf, 0x4c, 0x82, 0x49, 0x81, 0x51, 0x83, 0x39, 0x88,
	0xb1, 0x0c, 0xa4, 0x32, 0xb8, 0x34, 0x89, 0x18, 0x95, 0xc6, 0x5c, 0xbc, 0x60, 0x65, 0xce, 0x2e,
	0x21, 0xc1, 0x25, 0x89, 0x25, 0xa9, 0x42, 0x02, 0x5c, 0xcc, 0xb9, 0x89, 0x15, 0x60, 0xe5, 0xcc,
	0x41, 0x20, 0x26, 0x58, 0x24, 0x33, 0x0f, 0xaa, 0x05, 0xc4, 0x74, 0xf2, 0x3e, 0xf1, 0x50, 0x8e,
	0xe1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58,
	0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x74, 0xd3, 0x33, 0x4b, 0x32,
	0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x53, 0x12, 0x4b, 0x12, 0x93, 0x33, 0x12, 0x33, 0xf3,
	0x72, 0x12, 0x93, 0xf4, 0xc1, 0xfe, 0xd3, 0x05, 0x79, 0xbd, 0x02, 0x1c, 0x00, 0x60, 0xcf, 0x27,
	0xb1, 0x81, 0x3d, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xc6, 0x2d, 0x37, 0x1a, 0x01,
	0x00, 0x00,
}

func (m *AddInt64OP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddInt64OP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddInt64OP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.V != 0 {
		i = encodeVarintIntTypes(dAtA, i, uint64(m.V))
		i--
		dAtA[i] = 0x10
	}
	if len(m.K) > 0 {
		i -= len(m.K)
		copy(dAtA[i:], m.K)
		i = encodeVarintIntTypes(dAtA, i, uint64(len(m.K)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubInt64OP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubInt64OP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubInt64OP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.V != 0 {
		i = encodeVarintIntTypes(dAtA, i, uint64(m.V))
		i--
		dAtA[i] = 0x10
	}
	if len(m.K) > 0 {
		i -= len(m.K)
		copy(dAtA[i:], m.K)
		i = encodeVarintIntTypes(dAtA, i, uint64(len(m.K)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Int64CDTState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64CDTState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Int64CDTState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Min != 0 {
		i = encodeVarintIntTypes(dAtA, i, uint64(m.Min))
		i--
		dAtA[i] = 0x10
	}
	if m.Max != 0 {
		i = encodeVarintIntTypes(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIntTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovIntTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddInt64OP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.K)
	if l > 0 {
		n += 1 + l + sovIntTypes(uint64(l))
	}
	if m.V != 0 {
		n += 1 + sovIntTypes(uint64(m.V))
	}
	return n
}

func (m *SubInt64OP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.K)
	if l > 0 {
		n += 1 + l + sovIntTypes(uint64(l))
	}
	if m.V != 0 {
		n += 1 + sovIntTypes(uint64(m.V))
	}
	return n
}

func (m *Int64CDTState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Max != 0 {
		n += 1 + sovIntTypes(uint64(m.Max))
	}
	if m.Min != 0 {
		n += 1 + sovIntTypes(uint64(m.Min))
	}
	return n
}

func sovIntTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIntTypes(x uint64) (n int) {
	return sovIntTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddInt64OP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddInt64OP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddInt64OP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIntTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIntTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K = append(m.K[:0], dAtA[iNdEx:postIndex]...)
			if m.K == nil {
				m.K = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			m.V = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIntTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIntTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIntTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubInt64OP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubInt64OP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubInt64OP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIntTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIntTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K = append(m.K[:0], dAtA[iNdEx:postIndex]...)
			if m.K == nil {
				m.K = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			m.V = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIntTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIntTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIntTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int64CDTState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64CDTState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64CDTState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIntTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIntTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIntTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIntTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIntTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIntTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIntTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIntTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIntTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIntTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIntTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIntTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIntTypes = fmt.Errorf("proto: unexpected end of group")
)
