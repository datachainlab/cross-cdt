// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cross/cdt/types.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CDTType int32

const (
	CDT_TYPE_UNKNOWN CDTType = 0
	CDT_TYPE_INT64   CDTType = 1
	CDT_TYPE_GSET    CDTType = 2
)

var CDTType_name = map[int32]string{
	0: "CDT_TYPE_UNKNOWN",
	1: "CDT_TYPE_INT64",
	2: "CDT_TYPE_GSET",
}

var CDTType_value = map[string]int32{
	"CDT_TYPE_UNKNOWN": 0,
	"CDT_TYPE_INT64":   1,
	"CDT_TYPE_GSET":    2,
}

func (x CDTType) String() string {
	return proto.EnumName(CDTType_name, int32(x))
}

func (CDTType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8dd1f467160e2030, []int{0}
}

type AnyOPs struct {
	Ops []types.Any `protobuf:"bytes,1,rep,name=ops,proto3" json:"ops"`
}

func (m *AnyOPs) Reset()         { *m = AnyOPs{} }
func (m *AnyOPs) String() string { return proto.CompactTextString(m) }
func (*AnyOPs) ProtoMessage()    {}
func (*AnyOPs) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd1f467160e2030, []int{0}
}
func (m *AnyOPs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnyOPs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnyOPs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnyOPs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnyOPs.Merge(m, src)
}
func (m *AnyOPs) XXX_Size() int {
	return m.Size()
}
func (m *AnyOPs) XXX_DiscardUnknown() {
	xxx_messageInfo_AnyOPs.DiscardUnknown(m)
}

var xxx_messageInfo_AnyOPs proto.InternalMessageInfo

type AnyCDTState struct {
	State types.Any `protobuf:"bytes,1,opt,name=state,proto3" json:"state"`
}

func (m *AnyCDTState) Reset()         { *m = AnyCDTState{} }
func (m *AnyCDTState) String() string { return proto.CompactTextString(m) }
func (*AnyCDTState) ProtoMessage()    {}
func (*AnyCDTState) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd1f467160e2030, []int{1}
}
func (m *AnyCDTState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnyCDTState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnyCDTState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnyCDTState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnyCDTState.Merge(m, src)
}
func (m *AnyCDTState) XXX_Size() int {
	return m.Size()
}
func (m *AnyCDTState) XXX_DiscardUnknown() {
	xxx_messageInfo_AnyCDTState.DiscardUnknown(m)
}

var xxx_messageInfo_AnyCDTState proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cross.cdt.CDTType", CDTType_name, CDTType_value)
	proto.RegisterType((*AnyOPs)(nil), "cross.cdt.AnyOPs")
	proto.RegisterType((*AnyCDTState)(nil), "cross.cdt.AnyCDTState")
}

func init() { proto.RegisterFile("cross/cdt/types.proto", fileDescriptor_8dd1f467160e2030) }

var fileDescriptor_8dd1f467160e2030 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x2e, 0xca, 0x2f,
	0x2e, 0xd6, 0x4f, 0x4e, 0x29, 0xd1, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x04, 0x0b, 0xeb, 0x25, 0xa7, 0x94, 0x48, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83,
	0x45, 0xf5, 0x41, 0x2c, 0x88, 0x02, 0x29, 0xc9, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0x7d, 0x30,
	0x2f, 0xa9, 0x34, 0x4d, 0x3f, 0x31, 0xaf, 0x12, 0x22, 0xa5, 0x64, 0xc6, 0xc5, 0xe6, 0x98, 0x57,
	0xe9, 0x1f, 0x50, 0x2c, 0xa4, 0xc3, 0xc5, 0x9c, 0x5f, 0x50, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1,
	0x6d, 0x24, 0xa2, 0x07, 0xd1, 0xa2, 0x07, 0xd3, 0xa2, 0xe7, 0x98, 0x57, 0xe9, 0xc4, 0x72, 0xe2,
	0x9e, 0x3c, 0x43, 0x10, 0x48, 0x99, 0x92, 0x3d, 0x17, 0xb7, 0x63, 0x5e, 0xa5, 0xb3, 0x4b, 0x48,
	0x70, 0x49, 0x62, 0x49, 0xaa, 0x90, 0x01, 0x17, 0x6b, 0x31, 0x88, 0x21, 0xc1, 0xa8, 0xc0, 0x48,
	0x40, 0x3b, 0x44, 0xa1, 0x96, 0x0f, 0x17, 0xbb, 0xb3, 0x4b, 0x48, 0x48, 0x65, 0x41, 0xaa, 0x90,
	0x08, 0x97, 0x80, 0xb3, 0x4b, 0x48, 0x7c, 0x48, 0x64, 0x80, 0x6b, 0x7c, 0xa8, 0x9f, 0xb7, 0x9f,
	0x7f, 0xb8, 0x9f, 0x00, 0x83, 0x90, 0x10, 0x17, 0x1f, 0x5c, 0xd4, 0xd3, 0x2f, 0xc4, 0xcc, 0x44,
	0x80, 0x51, 0x48, 0x90, 0x8b, 0x17, 0x2e, 0xe6, 0x1e, 0xec, 0x1a, 0x22, 0xc0, 0x24, 0xc5, 0xd2,
	0xb1, 0x58, 0x8e, 0xc1, 0xc9, 0xfb, 0xc4, 0x43, 0x39, 0x86, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c,
	0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e,
	0x3c, 0x96, 0x63, 0x88, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5,
	0x4f, 0x49, 0x2c, 0x49, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xcb, 0x49, 0x4c, 0xd2, 0x07, 0x07, 0x9c,
	0x2e, 0x28, 0x3c, 0x2b, 0x10, 0xa1, 0x9a, 0xc4, 0x06, 0x76, 0xb5, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x80, 0x1d, 0x90, 0x33, 0x6f, 0x01, 0x00, 0x00,
}

func (m *AnyOPs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnyOPs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyOPs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for iNdEx := len(m.Ops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AnyCDTState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnyCDTState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyCDTState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AnyOPs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AnyCDTState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.State.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnyOPs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnyOPs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnyOPs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, types.Any{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnyCDTState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnyCDTState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnyCDTState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
